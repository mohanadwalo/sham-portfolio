{"version":3,"sources":["components/shared/resultMessage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","features/blogs/index.tsx"],"names":["StyledResultMessage","styled","div","props","theme","fonts","body","colors","white","ResultMessage","message","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","StyledBlogs","blog","input","bodySpaceTopBottom","h4","bodySpace","overlay","BlogsIndex","dispatch","useAppDispatch","data","useAppSelector","selectAllBlogs","useEffect","status","getBlogsFromApi","searchText","activeTags","useState","setActiveTags","navigate","useNavigate","className","type","onChange","e","target","value","join","placeholder","blogsResponse","tags","map","tag","index","includes","padding","minWidth","title","action","tagName","filter","blogs","onClick","id","style","backgroundImage","icon","length"],"mappings":"0LAEMA,EAAsBC,IAAOC,IAAV,iIACrB,SAACC,GAAD,OAAWA,EAAMC,MAAMC,MAAMC,QACtB,SAACH,GAAD,OAAWA,EAAMC,MAAMG,OAAOC,SAU5BC,EAA6C,SAAC,GAEjC,IADxBC,EACuB,EADvBA,QAEA,OAAO,cAACV,EAAD,UAAsBU,M,0GCbhB,SAASC,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,G,iFIGxFC,EAActB,IAAOC,IAAV,8wBACb,SAACC,GAAD,OAAWA,EAAMC,MAAMoB,QAErB,SAACrB,GAAD,OAAWA,EAAMC,MAAMqB,SAErB,SAACtB,GAAD,OAAWA,EAAMC,MAAMC,MAAMC,QAgB7B,SAACH,GAAD,OAAWA,EAAMC,MAAMsB,sBAWnB,SAACvB,GAAD,OAAWA,EAAMC,MAAMC,MAAMsB,MAC7B,SAACxB,GAAD,OAAWA,EAAMC,MAAMwB,aACX,SAACzB,GAAD,OAAWA,EAAMC,MAAMG,OAAOsB,WAWzCC,EAAuB,WAAO,IAAD,MAClCC,EAAWC,cACXC,EAAOC,YAAeC,KAC5BC,qBAAU,WACY,YAAhBH,EAAKI,QACPN,EAASO,YAAgB,CAAEC,WAAY,GAAIC,WAAY,QACxD,CAACP,EAAKI,OAAQN,IAEjB,MAAoCU,mBAAmB,IAAvD,mBAAOD,EAAP,KAAmBE,EAAnB,KAQMC,EAAWC,cACjB,OACE,eAACrB,EAAD,WACE,qBAAKsB,UAAU,SAAf,SACE,uBACEC,KAAK,OACLD,UAAU,eACVE,SAAU,SAACC,GAAD,OACRjB,EACEO,YAAgB,CACdC,WAAYS,EAAEC,OAAOC,MACrBV,WAAYA,EAAWW,KAAK,QAIlCC,YAAY,2BAIhB,qBAAKP,UAAU,OAAf,gBACGZ,QADH,IACGA,GADH,UACGA,EAAMoB,qBADT,aACG,EAAqBC,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAC7B,qBAA0BZ,UAAU,cAApC,SACE,cAAC,IAAD,CACEA,UAAS,aAAQL,EAAWkB,SAASF,GAAO,UAAY,IACxDG,QAAQ,cACRC,SAAS,OACTC,MAAOL,EACPM,OAAQ,kBAjCEC,EAiCiBP,OAhCjChB,EAAWkB,SAASK,GACtBrB,EAAc,EAAIF,EAAWwB,QAAO,SAACR,GAAD,OAASA,IAAQO,OAClDrB,EAAc,GAAD,SAAKF,GAAL,CAAiBuB,MAHhB,IAACA,MA2Bd,cAAiBN,SAWrB,sBAAKZ,UAAU,aAAf,iBACGZ,QADH,IACGA,GADH,UACGA,EAAMoB,qBADT,aACG,EAAqBY,MAAMV,KAAI,SAAC/B,GAAD,OAC9B,qBAEE0C,QAAS,kBAAMvB,EAAS,UAAD,OAAWnB,EAAK2C,GAAhB,kBAA4B3C,EAAKqC,SACxDhB,UAAU,iBAHZ,SAKE,sBAAKA,UAAU,OAAf,UACE,qBACEA,UAAU,QACVuB,MAAO,CAAEC,gBAAgB,OAAD,OAAS7C,EAAK8C,KAAd,QAE1B,qBAAKzB,UAAU,QAAf,SAAwBrB,EAAKqC,YAVjC,qBACqBrC,EAAK2C,SAavB,OAAJlC,QAAI,IAAJA,GAAA,UAAAA,EAAMoB,qBAAN,eAAqBY,MAAMM,SAAU,GACpC,cAAC,IAAD,CAAe7D,QAAQ,0DAOlBoB","file":"static/js/8.3fc7c034.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst StyledResultMessage = styled.div`\n  ${(props) => props.theme.fonts.body};\n  color: ${(props) => props.theme.colors.white};\n  display: flex;\n  width: 100%;\n  padding: 1rem;\n  border-radius: 0.5rem;\n`;\n\ntype ResultMessageType = {\n  message: string;\n};\nexport const ResultMessage: React.FC<ResultMessageType> = ({\n  message,\n}: ResultMessageType) => {\n  return <StyledResultMessage>{message}</StyledResultMessage>;\n};\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '../../components/shared/button';\nimport { ResultMessage } from '../../components/shared/resultMessage';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getBlogsFromApi, selectAllBlogs } from './blogsSlice';\n\nconst StyledBlogs = styled.div`\n  ${(props) => props.theme.blog}\n  .search {\n    ${(props) => props.theme.input}\n    input {\n      ${(props) => props.theme.fonts.body}\n      height: 2.625rem;\n    }\n  }\n  .tags {\n    display: flex;\n    flex-wrap: wrap;\n    padding-top: 1rem;\n    .tag {\n      margin: 0.4rem;\n    }\n  }\n  .blogs-list {\n    display: flex;\n    .blog-container {\n      display: flex;\n      ${(props) => props.theme.bodySpaceTopBottom}\n      .blog {\n        cursor: pointer;\n        position relative;\n        .image {\n          width: 100%;\n          height: 100%;\n          background-repeat: no-repeat;\n          background-size: cover;\n        }\n        .title {\n          ${(props) => props.theme.fonts.h4}\n          ${(props) => props.theme.bodySpace}\n          background: ${(props) => props.theme.colors.overlay};\n          position: absolute;\n          bottom: 0;\n          width: 100%;\n          text-transform: capitalize;\n        }\n      }\n    }\n  }\n`;\n\nexport const BlogsIndex: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const data = useAppSelector(selectAllBlogs);\n  useEffect(() => {\n    if (data.status === 'pending')\n      dispatch(getBlogsFromApi({ searchText: '', activeTags: '' }));\n  }, [data.status, dispatch]);\n\n  const [activeTags, setActiveTags] = useState<string[]>([]);\n\n  const addRemoveTag = (tagName: string) => {\n    if (activeTags.includes(tagName))\n      setActiveTags([...activeTags.filter((tag) => tag !== tagName)]);\n    else setActiveTags([...activeTags, tagName]);\n  };\n\n  const navigate = useNavigate();\n  return (\n    <StyledBlogs>\n      <div className='search'>\n        <input\n          type='text'\n          className='search-input'\n          onChange={(e) =>\n            dispatch(\n              getBlogsFromApi({\n                searchText: e.target.value,\n                activeTags: activeTags.join(''),\n              })\n            )\n          }\n          placeholder='Search for a keyword'\n        />\n      </div>\n\n      <div className='tags'>\n        {data?.blogsResponse?.tags.map((tag, index) => (\n          <div key={`tag_${index}`} className='tag-wrapper'>\n            <Button\n              className={`tag${activeTags.includes(tag) ? ' active' : ''}`}\n              padding='0.2rem 1rem'\n              minWidth='auto'\n              title={tag}\n              action={() => addRemoveTag(tag)}\n            />\n          </div>\n        ))}\n      </div>\n      <div className='blogs-list'>\n        {data?.blogsResponse?.blogs.map((blog) => (\n          <div\n            key={`blogs_list_${blog.id}`}\n            onClick={() => navigate(`/blogs/${blog.id}?title=${blog.title}`)}\n            className='blog-container'\n          >\n            <div className='blog'>\n              <div\n                className='image'\n                style={{ backgroundImage: `url(${blog.icon})` }}\n              ></div>\n              <div className='title'>{blog.title}</div>\n            </div>\n          </div>\n        ))}\n        {data?.blogsResponse?.blogs.length <= 0 && (\n          <ResultMessage message='There is no data that matches the search text.' />\n        )}\n      </div>\n    </StyledBlogs>\n  );\n};\n\nexport default BlogsIndex;\n"],"sourceRoot":""}