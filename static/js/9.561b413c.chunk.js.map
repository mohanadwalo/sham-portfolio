{"version":3,"sources":["components/shared/resultMessage.tsx","features/projects/index.tsx"],"names":["StyledResultMessage","styled","div","props","theme","fonts","body","colors","white","ResultMessage","message","StyledProjects","projects","input","bodySpaceTopBottom","h4","titleSpace","primary","ProjectsIndex","dispatch","useAppDispatch","data","useAppSelector","selectAllProjects","useEffect","status","getProjectsFromApi","navigate","useNavigate","className","type","onChange","e","target","value","placeholder","map","project","onClick","id","title","style","backgroundImage","icon","length"],"mappings":"0LAEMA,EAAsBC,IAAOC,IAAV,iIACrB,SAACC,GAAD,OAAWA,EAAMC,MAAMC,MAAMC,QACtB,SAACH,GAAD,OAAWA,EAAMC,MAAMG,OAAOC,SAU5BC,EAA6C,SAAC,GAEjC,IADxBC,EACuB,EADvBA,QAEA,OAAO,cAACV,EAAD,UAAsBU,M,wGCVzBC,EAAiBV,IAAOC,IAAV,02BAChB,SAACC,GAAD,OAAWA,EAAMC,MAAMQ,YAErB,SAACT,GAAD,OAAWA,EAAMC,MAAMS,SAErB,SAACV,GAAD,OAAWA,EAAMC,MAAMC,MAAMC,QAK/B,SAACH,GAAD,OAAWA,EAAMC,MAAMU,sBAGvB,SAACX,GAAD,OAAWA,EAAMC,MAAMC,MAAMU,MAkBvB,SAACZ,GAAD,OAAWA,EAAMC,MAAMC,MAAMU,MAE7B,SAACZ,GAAD,OAAWA,EAAMC,MAAMY,cAQH,SAACb,GAAD,OAAWA,EAAMC,MAAMG,OAAOU,WAwD/CC,UAhDiB,WAC9B,IAAMC,EAAWC,cACXC,EAAOC,YAAeC,KAC5BC,qBAAU,WACY,YAAhBH,EAAKI,QAAsBN,EAASO,YAAmB,OAC1D,CAACL,EAAKI,SAET,IAAME,EAAWC,cACjB,OACE,eAACjB,EAAD,WACE,qBAAKkB,UAAU,SAAf,SACE,uBACEC,KAAK,OACLD,UAAU,eACVE,SAAU,SAACC,GAAD,OAAOb,EAASO,YAAmBM,EAAEC,OAAOC,SACtDC,YAAY,2BAGhB,qBAAKN,UAAU,UAAf,wIAIA,sBAAKA,UAAU,gBAAf,UACGR,EAAKT,SAASwB,KAAI,SAACC,GAAD,OACjB,qBAEEC,QAAS,kBACPX,EAAS,aAAD,OAAcU,EAAQE,GAAtB,kBAAkCF,EAAQG,SAEpDX,UAAU,oBALZ,SAOE,sBAAKA,UAAU,UAAf,UACE,qBACEA,UAAU,QACVY,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAQM,KAAjB,QAE1B,qBAAKd,UAAU,QAAf,SAAwBQ,EAAQG,YAZpC,wBACwBH,EAAQE,QAejClB,EAAKT,SAASgC,QAAU,GACvB,cAAC,IAAD,CAAelC,QAAQ","file":"static/js/9.561b413c.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst StyledResultMessage = styled.div`\n  ${(props) => props.theme.fonts.body};\n  color: ${(props) => props.theme.colors.white};\n  display: flex;\n  width: 100%;\n  padding: 1rem;\n  border-radius: 0.5rem;\n`;\n\ntype ResultMessageType = {\n  message: string;\n};\nexport const ResultMessage: React.FC<ResultMessageType> = ({\n  message,\n}: ResultMessageType) => {\n  return <StyledResultMessage>{message}</StyledResultMessage>;\n};\n","import { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { ResultMessage } from '../../components/shared/resultMessage';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getProjectsFromApi, selectAllProjects } from './projectsSlice';\n\nconst StyledProjects = styled.div`\n  ${(props) => props.theme.projects}\n  .search {\n    ${(props) => props.theme.input}\n    input {\n      ${(props) => props.theme.fonts.body}\n    }\n  }\n  .message,\n  .projects-list {\n    ${(props) => props.theme.bodySpaceTopBottom}\n  }\n  .message {\n    ${(props) => props.theme.fonts.h4}\n  }\n  .projects-list {\n    display: flex;\n    flex-wrap: wrap;\n    .project-container {\n      display: flex;\n      flex-wrap: wrap;\n\n      .project {\n        cursor: pointer;\n        flex-shrink: 0;\n        .image {\n          height: 15.75rem;\n          background-repeat: no-repeat;\n          background-size: cover;\n        }\n        .title {\n          ${(props) => props.theme.fonts.h4}\n          position: relative;\n          ${(props) => props.theme.titleSpace}\n          text-transform: capitalize;\n          :before {\n            position: absolute;\n            width: 10px;\n            left: -8px;\n            border-radius: 1.25rem;\n            content: '';\n            background-color: ${(props) => props.theme.colors.primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ProjectsIndex: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const data = useAppSelector(selectAllProjects);\n  useEffect(() => {\n    if (data.status === 'pending') dispatch(getProjectsFromApi(''));\n  }, [data.status]);\n\n  const navigate = useNavigate();\n  return (\n    <StyledProjects>\n      <div className='search'>\n        <input\n          type='text'\n          className='search-input'\n          onChange={(e) => dispatch(getProjectsFromApi(e.target.value))}\n          placeholder='Search for a keyword'\n        />\n      </div>\n      <div className='message'>\n        In our professional life, we experience different types of projects. We\n        are always happy to solve our customers&apos; problems.\n      </div>\n      <div className='projects-list'>\n        {data.projects.map((project) => (\n          <div\n            key={`projects_list_${project.id}`}\n            onClick={() =>\n              navigate(`/projects/${project.id}?title=${project.title}`)\n            }\n            className='project-container'\n          >\n            <div className='project'>\n              <div\n                className='image'\n                style={{ backgroundImage: `url(${project.icon})` }}\n              ></div>\n              <div className='title'>{project.title}</div>\n            </div>\n          </div>\n        ))}\n        {data.projects.length <= 0 && (\n          <ResultMessage message='There is no data that matches the search text.' />\n        )}\n      </div>\n    </StyledProjects>\n  );\n};\n\nexport default ProjectsIndex;\n"],"sourceRoot":""}